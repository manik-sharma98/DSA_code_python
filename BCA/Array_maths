def generateMatrix(n):
    matrix = [[0]*n for i in range(n)]
    top = 0
    left = 0
    bottom = n - 1
    right = n - 1
    cnt = 1
    while cnt <= n*n:
        for i in range(left,right+1):
            matrix[top][i] = cnt
            cnt += 1
        top += 1
        for i in range(top,bottom+1):
            matrix[i][right] = cnt 
            cnt += 1
        right -= 1
        for i in range(right,left-1,-1):
            matrix[bottom][i] = cnt
            cnt += 1
        bottom -= 1
        for i in range(bottom,top-1,-1):
            matrix[i][left] = cnt 
            cnt += 1
        left += 1
        
    print(matrix)

generateMatrix(3)

def trap(heights):
    if len(heights) <= 1:
        return 0
    l = 0
    r = len(heights) - 1
    l_max = -float('inf')
    r_max = -float('inf')
    ans = 0
    while l < r:
        if heights[l]<heights[r]:
            l_max = max(l_max,heights[l])
            ans += l_max - heights[l]
            l += 1
        else:
            r_max = max(r_max,heights[r])
            ans += r_max - heights[r]
            r -= 1
    return ans
height = [0,1,0,2,1,0,1,3,2,1,2,1]
print(trap(height))

def maxAbsValExpr(arr1,arr2):
    val1,val2,val3,val4 = [],[],[],[]
    for i in range(len(arr1)):
        val1.append(i-arr1[i]-arr2[i])
        val2.append(i-arr1[i]+arr2[i])
        val3.append(i+arr1[i]-arr2[i])
        val4.append(i+arr1[i]+arr2[i])

    res = 0
    res = max((max(val1)-min(val1)),(max(val2)-min(val2)),(max(val3)-min(val3)),(max(val4)-min(val4)))
    return res

arr1 = [1,2,3,4]
arr2 = [-1,4,5,6]
print(maxAbsValExpr(arr1,arr2))